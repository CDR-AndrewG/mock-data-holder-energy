//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace CDR.DataHolder.IdentityServer.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System = global::System;



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RegistrationProperties
    {
        /// <summary>Data Holder issued client identifier string</summary>
        [Newtonsoft.Json.JsonProperty("client_id", Required = Newtonsoft.Json.Required.Always)]
        public string Client_id { get; set; }

        /// <summary>Time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC</summary>
        [Newtonsoft.Json.JsonProperty("client_id_issued_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Client_id_issued_at { get; set; }

        /// <summary>Human-readable string name of the software product to be presented to the end-user during authorization</summary>
        [Newtonsoft.Json.JsonProperty("client_name", Required = Newtonsoft.Json.Required.Always)]
        public string Client_name { get; set; }

        /// <summary>Human-readable string name of the software product description to be presented to the end user during authorization</summary>
        [Newtonsoft.Json.JsonProperty("client_description", Required = Newtonsoft.Json.Required.Always)]
        public string Client_description { get; set; }

        /// <summary>URL string of a web page providing information about the client</summary>
        [Newtonsoft.Json.JsonProperty("client_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Client_uri { get; set; }

        /// <summary>A unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Brand</summary>
        [Newtonsoft.Json.JsonProperty("org_id", Required = Newtonsoft.Json.Required.Always)]
        public string Org_id { get; set; }

        /// <summary>Human-readable string name of the Accredited Data Recipient to be presented to the end user during authorization</summary>
        [Newtonsoft.Json.JsonProperty("org_name", Required = Newtonsoft.Json.Required.Always)]
        public string Org_name { get; set; }

        /// <summary>Array of redirection URI strings for use in redirect-based flows</summary>
        [Newtonsoft.Json.JsonProperty("redirect_uris", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<System.Uri> Redirect_uris { get; set; } = new System.Collections.Generic.List<System.Uri>();

        /// <summary>URL string that references a logo for the client. If present, the server SHOULD display this image to the end-user during approval</summary>
        [Newtonsoft.Json.JsonProperty("logo_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Logo_uri { get; set; }

        /// <summary>URL string that points to a human-readable terms of service document for the Software Product</summary>
        [Newtonsoft.Json.JsonProperty("tos_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tos_uri { get; set; }

        /// <summary>URL string that points to a human-readable policy document for the Software Product</summary>
        [Newtonsoft.Json.JsonProperty("policy_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Policy_uri { get; set; }

        /// <summary>URL string referencing the client JSON Web Key (JWK) Set [RFC7517] document, which contains the client public keys</summary>
        [Newtonsoft.Json.JsonProperty("jwks_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Jwks_uri { get; set; }

        /// <summary>URI string that references the location of the Software Product consent revocation endpoint</summary>
        [Newtonsoft.Json.JsonProperty("revocation_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Revocation_uri { get; set; }

        /// <summary>The requested authentication method for the token endpoint</summary>
        [Newtonsoft.Json.JsonProperty("token_endpoint_auth_method", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationPropertiesToken_endpoint_auth_method Token_endpoint_auth_method { get; set; }

        /// <summary>The algorithm used for signing the JWT</summary>
        [Newtonsoft.Json.JsonProperty("token_endpoint_auth_signing_alg", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationPropertiesToken_endpoint_auth_signing_alg Token_endpoint_auth_signing_alg { get; set; }

        /// <summary>Array of OAuth 2.0 grant type strings that the client can use at the token endpoint</summary>
        [Newtonsoft.Json.JsonProperty("grant_types", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Grant_types> Grant_types { get; set; } = new System.Collections.Generic.List<Grant_types>();

        /// <summary>Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("response_types", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Response_types> Response_types { get; set; } = new System.Collections.Generic.List<Response_types>();

        /// <summary>Kind of the application. The only supported application type will be `web`</summary>
        [Newtonsoft.Json.JsonProperty("application_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationPropertiesApplication_type? Application_type { get; set; }

        /// <summary>Algorithm with which an id_token is to be signed</summary>
        [Newtonsoft.Json.JsonProperty("id_token_signed_response_alg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationPropertiesId_token_signed_response_alg? Id_token_signed_response_alg { get; set; }

        /// <summary>JWE `alg` algorithm with which an id_token is to be encrypted</summary>
        [Newtonsoft.Json.JsonProperty("id_token_encrypted_response_alg", Required = Newtonsoft.Json.Required.Always)]
        public string Id_token_encrypted_response_alg { get; set; }

        /// <summary>JWE `enc` algorithm with which an id_token is to be encrypted</summary>
        [Newtonsoft.Json.JsonProperty("id_token_encrypted_response_enc", Required = Newtonsoft.Json.Required.Always)]
        public string Id_token_encrypted_response_enc { get; set; }

        /// <summary>Algorithm which the ADR expects to sign the request object if a request object will be part of the authorization request sent to the Data Holder</summary>
        [Newtonsoft.Json.JsonProperty("request_object_signing_alg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationPropertiesRequest_object_signing_alg? Request_object_signing_alg { get; set; }

        /// <summary>The Software Statement Assertion, as defined in [Dynamic Client Registration](https://cdr-register.github.io/register/#dynamic-client-registration)</summary>
        [Newtonsoft.Json.JsonProperty("software_statement", Required = Newtonsoft.Json.Required.Always)]
        public string Software_statement { get; set; }

        /// <summary>String representing a unique identifier assigned by the ACCC Register and used by registration endpoints to identify the software product to be dynamically registered. &lt;/br&gt;&lt;/br&gt;The "software_id" will remain the same for the lifetime of the product, across multiple updates and versions</summary>
        [Newtonsoft.Json.JsonProperty("software_id", Required = Newtonsoft.Json.Required.Always)]
        public string Software_id { get; set; }

        /// <summary>String containing a space-separated list of scope values that the client can use when requesting access tokens.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        public string Scope { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ClientRegistration : RegistrationProperties
    {
        /// <summary>Unique identifier for the Data Holder issued by the CDR Register</summary>
        [Newtonsoft.Json.JsonProperty("iss", Required = Newtonsoft.Json.Required.Always)]
        public string Iss { get; set; }

        /// <summary>The time at which the request was issued by the TPP  expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC</summary>
        [Newtonsoft.Json.JsonProperty("iat", Required = Newtonsoft.Json.Required.Always)]
        public int Iat { get; set; }

        /// <summary>The time at which the request expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC</summary>
        [Newtonsoft.Json.JsonProperty("exp", Required = Newtonsoft.Json.Required.Always)]
        public int Exp { get; set; }

        /// <summary>Unique identifier for the JWT, used to prevent replay of the token</summary>
        [Newtonsoft.Json.JsonProperty("jti", Required = Newtonsoft.Json.Required.Always)]
        public string Jti { get; set; }

        /// <summary>The audience for the request. This should be the Data Holder authorisation server URI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aud", Required = Newtonsoft.Json.Required.Always)]
        public string Aud { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RegistrationError
    {
        /// <summary>Predefined error code as described in [section 3.3 OIDC Dynamic Client Registration](https://openid.net/specs/openid-connect-registration-1_0.html)</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistrationErrorError Error { get; set; }

        /// <summary>Additional text description of the error for debugging.</summary>
        [Newtonsoft.Json.JsonProperty("error_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationPropertiesToken_endpoint_auth_method
    {
        [System.Runtime.Serialization.EnumMember(Value = @"private_key_jwt")]
        [System.ComponentModel.DataAnnotations.Display(Name = "private_key_jwt")]
        Private_key_jwt = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationPropertiesToken_endpoint_auth_signing_alg
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PS256")]
        PS256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ES256")]
        ES256 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Grant_types
    {
        [System.Runtime.Serialization.EnumMember(Value = @"client_credentials")]
        Client_credentials = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"authorization_code")]
        Authorization_code = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"refresh_token")]
        Refresh_token = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"urn:ietf:params:oauth:grant-type:jwt-bearer")]
        UrnIetfParamsOauthGrantTypeJwtBearer = 3,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response_types
    {
        [System.Runtime.Serialization.EnumMember(Value = @"code id_token")]
        Code_id_token = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationPropertiesApplication_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"web")]
        Web = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationPropertiesId_token_signed_response_alg
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PS256")]
        PS256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ES256")]
        ES256 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationPropertiesRequest_object_signing_alg
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PS256")]
        PS256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ES256")]
        ES256 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RegistrationErrorError
    {
        [System.Runtime.Serialization.EnumMember(Value = @"invalid_redirect_uri")]
        Invalid_redirect_uri = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid_client_metadata")]
        Invalid_client_metadata = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid_software_statement")]
        Invalid_software_statement = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unapproved_software_statement")]
        Unapproved_software_statement = 3,

    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108